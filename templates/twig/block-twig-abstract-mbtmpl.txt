<?php
/**
 * MageBuilder Twig Template
 */

class {CLASS} extends Mage_Core_Block_Abstract implements Twig_ExtensionInterface {
    /**
     * @var Twig_Loader_Filesystem
     */
    protected $_twigLoader;

    /**
     * @var Twig_Environment
     */
    protected $_twig;

    /**
     * @var string
     */
    protected $_baseDir;

    public function _construct() {
        parent::_construct();
        $this->_initTwig();
    }

    protected function _initTwig() {
        $this->_baseDir = Mage::getBaseDir('design');
        $this->_twigLoader = new Twig_Loader_Filesystem($this->_baseDir);
        $this->_twig = new Twig_Environment($this->_twigLoader);
    }

    protected function _fetchRenderVariables(){
        $variables = array();
        $class = new ReflectionClass(get_class($this));
        $properties = $class->getProperties(ReflectionProperty::IS_PUBLIC);
        foreach ($properties as $property) {
            $name = $property->name;
            $variables[$name] = $this->{$name};
        }
        $variables['this'] = $this;
        return $variables;
    }

    /**
     * Initializes the runtime environment.
     *
     * This is where you can load some file that contains filter functions for instance.
     *
     * @param Twig_Environment $environment The current Twig_Environment instance
     */
    public function initRuntime(Twig_Environment $environment) {
    }

    /**
     * Returns the token parser instances to add to the existing list.
     *
     * @return array An array of Twig_TokenParserInterface or Twig_TokenParserBrokerInterface instances
     */
    public function getTokenParsers() {
        return array();
    }

    /**
     * Returns the node visitor instances to add to the existing list.
     *
     * @return array An array of Twig_NodeVisitorInterface instances
     */
    public function getNodeVisitors() {
        return array();
    }

    /**
     * Returns a list of filters to add to the existing list.
     *
     * @return array An array of filters
     */
    public function getFilters() {
        return array();
    }

    /**
     * Returns a list of tests to add to the existing list.
     *
     * @return array An array of tests
     */
    public function getTests() {
        return array();
    }

    /**
     * Returns a list of functions to add to the existing list.
     *
     * @return array An array of functions
     */
    public function getFunctions() {
    }

    /**
     * Returns a list of operators to add to the existing list.
     *
     * @return array An array of operators
     */
    public function getOperators() {
    }

    /**
     * Returns a list of global variables to add to the existing list.
     *
     * @return array An array of global variables
     */
    public function getGlobals() {
        return array();
    }

    /**
     * Returns the name of the extension.
     *
     * @return string The extension name
     */
    public function getName() {
    }
}